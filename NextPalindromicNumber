import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while(T-- >0) {
            String n = sc.next();
            char[] carr = n.toCharArray();
            int[] arr = new int[carr.length];
            
            for(int i=0;i<arr.length;i++) {
                arr[i] = Integer.valueOf(String.valueOf(carr[i]));
            }
            generateNextPalindrome(arr, arr.length);
        }
    }
    
    public static void generateNextPalindrome(int[] arr, int n) {
        // if all digits are 9.
        if(isAll9(arr,n)) {
            System.out.print(1+"");
            for(int i=0;i<n-1;i++) System.out.print(0+"");
            System.out.println(1);
        }
        
        // if not then
        else {
            generateNextPalindromeUtil(arr,n);
            printArray(arr); // printing array as number
        }
    }
    
    public static boolean isAll9(int[] arr, int n) {
        for(int i=0;i<n;i++) {
            if(arr[i]!=9) return false;
        }
        return true;
    }
    
    public static void printArray(int[] arr) {
        for(int num : arr)
            System.out.print(num+"");
        System.out.println();
    }
    
    public static void generateNextPalindromeUtil(int arr[], int n) {
        int mid = n / 2;
        int i = mid - 1; // end of left side
        int j = (n%2 == 0) ? mid : mid + 1; // start of right side depends on length.
                                            // if length is even then mid, else mid + 1;
        
        boolean isLeftSmall = false;
        
        // to ignore the middle same digits
        while(i>=0 && arr[i] == arr[j]) {
            i--;
            j++;
        }
        
        if(i < 0 || arr[i] < arr[j]) {
            isLeftSmall = true;
        }
        
        // if left side is not smaller, then just copy left elements to right
        while(i >= 0) {
            arr[j++]  = arr[i--];
        }
        
        if(isLeftSmall) {
            int carry = 1;
            if(n%2 == 1) {
                arr[mid]+=1;
                carry = arr[mid]/10;
                arr[mid]%=10;
            }
            
            i = mid - 1;
            j = ((n % 2) == 0 ? mid : mid + 1);
            
            while(i>=0 && carry > 0) {
                arr[i] = arr[i] + carry;
                carry = arr[i] / 10;
                arr[i] %= 10;
                arr[j] = arr[i]; // copy mirror to right
                i--;
                j++;
             }
        }
        
        
        
    }
}
